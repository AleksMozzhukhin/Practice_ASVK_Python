# операторы логики

a, b = 12, 45
res = (a == b)
print(type(res))  # <class 'bool'> - однобитное число, равное нулю или единице
# логические операции имеют низший приоритет
# в питоне любой объект может трактоваться как True или False
# делается это так: имеются пустые и непустые объекты, которые могут интерпретироваться как 0 или 1
# для целых чисел False===0, иначе 1
# для строк 0 - это только пустая строка ""

# такого рода выражения вычисляются как в С (ленивые/частичные вычисления)

# немного синтаксического сахар: ... ==> <class 'ellipsis'>

# условный оператор "для бедных"
a, b, c = 12, 34, "condition"
res = c and a or b

#  аналог тернарной операции из С
res = a if c else b

# в питоне нет операторных скобок, а есть синтаксически значимый отсутуп


# блок про циклы

# удобство питона
i = 0
while i < 10:
    if i == 13:
        print("13 is found")
        break
    print(i)
    i += 2
else:
    print("Not found")  # закрывающий else, вызывается только тогда, когда вышли из цикла по неверному условию

# в питоне нет цикла с постусловием

# цикл и операция связывания (морж)
while test_string := input():
    print(int(test_string))  #ввод и печать строк до пустой строки

